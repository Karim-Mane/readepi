DBI::dbDisconnect(conn = con)
DBI::dbDisconnect(conn = con)
credentials = readMSsqlCredentials(credentials.file)
con = DBI::dbConnect(odbc::odbc(),
driver = driver.name,
server = credentials$host,
database = database.name,
uid = credentials$user,
pwd = credentials$pwd,
port = credentials$port)
database.name = db.name; driver.name = driver; table.name = db.table
con = DBI::dbConnect(odbc::odbc(),
driver = driver.name,
server = credentials$host,
database = database.name,
uid = credentials$user,
pwd = credentials$pwd,
port = credentials$port)
odbc::odbcListDrivers()
credentials
data = read_from_relationalDB(credentials.file, database.name = db.name, driver.name = driver, table.name = db.table)
credentials.file = "/Users/karimmane/Documents/Karim/LSHTM/Data/.redcap_credentials.ini"
data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=NULL,
fields=NULL)
file.path
if(!file.exists(file.path)){
stop("Could not find ",file.path)
}
credentials = data.table::fread(file.path,
sep = "\t")
credentials = data.table::fread(file.path,
sep = "\t")
credentials
if(ncol(credentials)!=5){
stop("credential file should be tab-separated file with 5 columns.")
}
if(!all((names(credentials) %in% c('uri', 'user_name', 'project_id', 'token', 'comment')))){
stop("Incorrect column names found in provided credentials file.\nThe column names should be 'uri', 'user_name', 'project_id', 'token', 'comment'")
}
idx = which(credentials$project_id==project.id)
idx
project.id
project.id="Pats__Covid_19_Cohort_1_Screening"
idx = which(credentials$project_id==project.id)
if(length(idx)==0){
stop("Credential details for ",project.id," not found in credential file.")
}else if(length(idx)>1){
stop("Multiple credential lines found the specified project ID.\nCredentials file should contain one line per project.")
}else{
project.credentials = list(uri=credentials$uri[idx],
token=credentials$token[idx])
}
project.credentials
credentials = readCredentials(credentials.file, project.id)
redcap.uri = credentials$uri
token = credentials$token
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, id_position=as.integer(id.position), records=NULL, fields=NULL, verbose = FALSE)
redcap.uri
token
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token)
idx
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, id_position=as.integer(id.position), records=NULL, fields=NULL, verbose = FALSE)$data
metadata=redcap_metadata_read(redcap_uri = redcap.uri, token = token)
redcap.data = REDCapR::redcap_read_oneshot(redcap_uri = redcap.uri, token = token, id_position=as.integer(id.position), records=NULL, fields=NULL, verbose = FALSE)
redcap.data = REDCapR::redcap_read_oneshot(redcap_uri = redcap.uri, token = token)
problems(redcap.data)
problems(redcap.data$data)
?redcap_read_oneshot
redcap.data
redcap.data = REDCapR::redcap_read_oneshot(redcap_uri = redcap.uri, token = token)
View(redcap.data)
View(redcap.data$data)
credentials = readCredentials(credentials.file, project.id)
redcap.uri = credentials$uri
token = credentials$token
redcap.uri
token
token="FF8E62358292A6A761195A51B9B5DA24"
redcap.data = REDCapR::redcap_read_oneshot(redcap_uri = redcap.uri, token = token, records=NULL, fields=NULL, verbose = FALSE)
View(redcap.data)
View(redcap.data$data)
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, records=NULL, fields=NULL, verbose = FALSE)
View(redcap.data$data)
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, records=NULL, fields=NULL, verbose = FALSE)
View(redcap.data$data)
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, records=NULL, fields=NULL, verbose = FALSE,id_position=as.integer(id.position))
metadata = redcap_metadata_read(redcap_uri = redcap.uri, token = token)
View(metadata)
meta = as.data.table(metadata$data)
View(meta)
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1 __Main__Index",
id.position=1,
records=NULL,
fields=NULL)
data = redcap.data$data
metadata = redcap.data$metadata
View(data)
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=NULL,
fields=NULL)
data = redcap.data$data
metadata = redcap.data$metadata
View(data)
names(data)[1:10]
fields = names(data)[1:10]
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=NULL,
fields=fields)
data = redcap.data$data
metadata = redcap.data$metadata
?redcap_metadata_read
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=NULL,
fields=fields)
data = redcap.data$data
metadata = redcap.data$metadata
unique(data$day_1_q_ran_id)[1:10]
records = unique(data$day_1_q_ran_id)[1:10]
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=records,
fields=fields)
data = redcap.data$data
metadata = redcap.data$metadata
credentials = readCredentials(credentials.file, project.id)
redcap.uri = credentials$uri
token = credentials$token
if(is.vector(fields)){
fields = paste(fields, collapse = ", ")
}
fields
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, id_position=as.integer(id.position), fields_collapsed=fields, verbose = FALSE)
metadata = REDCapR::redcap_metadata_read(redcap_uri = redcap.uri, token = token, fields_collapsed=fields, verbose = FALSE)
dim(redcap.data$data)
if(!is.vector(records)){
records = as.character(unlist(strsplit(records,",")))
}
records = unique(data$day_1_q_ran_id)[1:10]
data = redcap.data$data
records = unique(data$day_1_q_ran_id)[1:10]
id.column.name = names(redcap.data)[id.position]
if(is.numeric(redcap.data[[id.column.name]])){
records = as.numeric(records)
}
redcap.data$data = redcap.data$data[which(redcap.data$data[[id.column.name]] %in% records),]
dim(redcap.data$data)
redcap.data = REDCapR::redcap_read(redcap_uri = redcap.uri, token = token, id_position=as.integer(id.position), fields_collapsed=fields, verbose = FALSE)
dim(redcap.data$data)
id.column.name = names(redcap.data)[id.position]
id.column.name = names(redcap.data$data)[id.position]
if(is.numeric(redcap.data$data[[id.column.name]])){
records = as.numeric(records)
}
redcap.data$data = redcap.data$data[which(redcap.data$data[[id.column.name]] %in% records),]
dim(redcap.data$data)
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
redcap.data = read_from_redcap(credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position=1,
records=records,
fields=fields)
data = redcap.data$data
class("Karim, Mane")
as.character(unlist(strsplit("Karim, Mane",",")))
install.packages("jsonlite")
suppressPackageStartupMessages(require("jsonlite"))
??jsonlite
cat(toJSON(data), file = "/Users/karimmane/Documents/Karim/LSHTM/Data/test.json")
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
test = read_from_file(file.path = "/Users/karimmane/Documents/Karim/LSHTM/Data/test.json", sep=NULL, sheet.name=NULL)
library(data.table)
test = read_from_file(file.path = "/Users/karimmane/Documents/Karim/LSHTM/Data/test.json", sep=NULL, sheet.name=NULL)
install.packages("rio")
install_formats()
rio::install_formats()
library(rio)
test = import_list(dir())
View(test)
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data/For_correlation.xlsx"
data = rio::import(file.path, which = 1)
data = rio::import(file.path, which = "Sheet1")
data = rio::import(file.path, which = "Sheet2")
data = rio::import(file.path, which = "Sheet2")
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data"
data = rio::import_list(file.path)
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data/"
data = rio::import_list(file.path)
f=list.files(file.path)
f
f=f[-1]
f
data = rio::import_list(file.path, which = f)
file.path="/Users/karimmane/Documents/Karim/LSHTM/"
data = rio::import_list(file.path, which = f)
import_list
??import_list
data = rio::import_list(list.files(file.path, full.names = TRUE))
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data/"
data = rio::import_list(list.files(file.path, full.names = TRUE))
View(data)
?import
f=list.files(file.path, full.names = TRUE)
f=f[-1]
f
data = rio::import(file.path, format = NULL, which = "Sheet2")
data = rio::import(f[1], format = NULL, which = "Sheet2")
data = rio::import(f[1], which = "Sheet2")
data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = "csv$"))
file.path
data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = "*.csv$"))
data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = ".csv"))
data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = "*.csv"))
list.files(file.path, full.names = TRUE)
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data"
list.files(file.path, full.names = TRUE)
list.files(file.path, full.names = TRUE, pattern = "csv")
list.files(file.path, full.names = TRUE, pattern = "txt")
list.files(file.path, full.names = TRUE, pattern = "txt$")
file.path
file.path="/Users/karimmane/Documents/Karim/LSHTM/Data/.credentials_karim.ini"
if(!file.exists(file.path)){
stop("Could not find ",file.path)
}
credentials = data.table::fread(file.path,
sep = "\t")
credentials
ncol(credentials)
readCredentials = function(file.path, project.id){
if(!file.exists(file.path)){
stop("Could not find ",file.path)
}
credentials = data.table::fread(file.path,
sep = "\t")
if(ncol(credentials)!=7){
stop("credential file should be tab-separated file with 7 columns.")
}
if(!all((names(credentials) %in% c('user_name', 'password', 'host_name', 'project_id', 'comment', 'dbms', 'port')))){
stop("Incorrect column names found in provided credentials file.\nThe column names should be 'user_name', 'password', 'host_name', 'project_id', 'comment', 'dbms', 'port'")
}
idx = which(credentials$project_id==project.id)
if(length(idx)==0){
stop("Credential details for ",project.id," not found in credential file.")
}else if(length(idx)>1){
stop("Multiple credential lines found for the specified project ID.\nCredentials file should contain one line per project.")
}else{
project.credentials = list(user=credentials$user_name[idx],
pwd=credentials$password[idx],
host=credentials$host_name[idx],
project=credentials$project_id[idx],
dbms=credentials$dbms,
port=credentials$port)
}
project.credentials
}
credentials.file
credentials.file=file.path
credentials.file
project.id
credentials = readCredentials(credentials.file, project.id)
credentials
readCredentials = function(file.path, project.id){
if(!file.exists(file.path)){
stop("Could not find ",file.path)
}
credentials = data.table::fread(file.path,
sep = "\t")
if(ncol(credentials)!=7){
stop("credential file should be tab-separated file with 7 columns.")
}
if(!all((names(credentials) %in% c('user_name', 'password', 'host_name', 'project_id', 'comment', 'dbms', 'port')))){
stop("Incorrect column names found in provided credentials file.\nThe column names should be 'user_name', 'password', 'host_name', 'project_id', 'comment', 'dbms', 'port'")
}
idx = which(credentials$project_id==project.id)
if(length(idx)==0){
stop("Credential details for ",project.id," not found in credential file.")
}else if(length(idx)>1){
stop("Multiple credential lines found for the specified project ID.\nCredentials file should contain one line per project.")
}else{
project.credentials = list(user=credentials$user_name[idx],
pwd=credentials$password[idx],
host=credentials$host_name[idx],
project=credentials$project_id[idx],
dbms=credentials$dbms[idx],
port=credentials$port[idx])
}
project.credentials
}
credentials = readCredentials(credentials.file, project.id)
credentials
suppressPackageStartupMessages(require("rio"))
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
test = read_epi(credentials.file = file.path, project.id = "Pats__Covid_19_Cohort_1_Screening")
View(test)
file = "/Users/karimmane/Documents/Karim/LSHTM/Data/test.json"
data = read_from_file(file.path = file)
data = read_from_file(file.path = file, sep = NULL)
read_from_file = function(file.path, sep=NULL, format=NULL, which=NULL, pattern=NULL){
# check if the file exists
if(!file.exists(file.path) & !dir.exists(file.path)){
stop(file.path, " No such file or directory!")
}
# reading data from file
if(file.exists(file.path)){
if(sep==" "){
data = data.table::fread(file.path, sep = sep)
}else{
if(!is.null(which) & !is.null(format)) data = rio::import(file.path, format = format, which = which)
else if(!is.null(which) & is.null(format)) data = rio::import(file.path, which = which)
else if(!is.null(format) & is.null(which)) data = rio::import(file.path, format = format)
else data = rio::import(file.path)
}
}
# reading several files from a directory
if(dir.exists(file.path)){
if(!is.null(pattern)) data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = pattern))
else data = rio::import_list(list.files(file.path, full.names = TRUE))
}
as.data.table(data)
}
data = read_from_file(file.path = file)
read_from_file = function(file.path, sep=NULL, format=NULL, which=NULL, pattern=NULL){
# check if the file exists
if(!file.exists(file.path) & !dir.exists(file.path)){
stop(file.path, " No such file or directory!")
}
# reading data from file
if(file.exists(file.path)){
if(is.null(sep)){
if(!is.null(which) & !is.null(format)) data = rio::import(file.path, format = format, which = which)
else if(!is.null(which) & is.null(format)) data = rio::import(file.path, which = which)
else if(!is.null(format) & is.null(which)) data = rio::import(file.path, format = format)
else data = rio::import(file.path)
}else if(!is.null(sep) & sep==" "){
data = data.table::fread(file.path, sep = sep)
}
}
# reading several files from a directory
if(dir.exists(file.path)){
if(!is.null(pattern)) data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = pattern))
else data = rio::import_list(list.files(file.path, full.names = TRUE))
}
data
}
data = read_from_file(file.path = file)
data = read_epi(file.path = file)
file = "/Users/karimmane/Documents/Karim/LSHTM/Data/For_correlation.xlsx"
data = read_epi(file.path = file, which = "Sheet2")
dir.path = "/Users/karimmane/Documents/Karim/LSHTM/Data"
data = read_epi(file.path = dir.path)
file.exists(dir.path)
dir.exists(dir.path)
dir.path = "/Users/karimmane/Documents/Karim/LSHTM/Data/"
file.exists(dir.path)
file.exists(file = "/Users/karimmane/Documents/Karim/LSHTM/Data/For_correlation.xlsx")
dir.exists(file = "/Users/karimmane/Documents/Karim/LSHTM/Data/For_correlation.xlsx")
read_from_file = function(file.path, sep=NULL, format=NULL, which=NULL, pattern=NULL){
# check if the file exists
if(!file.exists(file.path) & !dir.exists(file.path)){
stop(file.path, " No such file or directory!")
}
# reading data from file
if(file.exists(file.path)){
if(is.null(sep)){
if(!is.null(which) & !is.null(format)) data = rio::import(file.path, format = format, which = which)
else if(!is.null(which) & is.null(format)) data = rio::import(file.path, which = which)
else if(!is.null(format) & is.null(which)) data = rio::import(file.path, format = format)
else data = rio::import(file.path)
}else if(!is.null(sep) & sep==" "){
data = data.table::fread(file.path, sep = sep)
}
}
# reading several files from a directory
if(dir.exists(file.path) & length(list.files(file.path))>0){
if(!is.null(pattern)) data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = pattern))
else data = rio::import_list(list.files(file.path, full.names = TRUE))
}
data
}
dir.exists()
file = "/Users/karimmane/Documents/Karim/LSHTM/Data/For_correlation.xlsx"
dir.exists(file)
read_from_file = function(file.path, sep=NULL, format=NULL, which=NULL, pattern=NULL){
# check if the file exists
if(!file.exists(file.path) & !dir.exists(file.path)){
stop(file.path, " No such file or directory!")
}
# reading data from file
if(file.exists(file.path) & !dir.exists(file.path)){
if(is.null(sep)){
if(!is.null(which) & !is.null(format)) data = rio::import(file.path, format = format, which = which)
else if(!is.null(which) & is.null(format)) data = rio::import(file.path, which = which)
else if(!is.null(format) & is.null(which)) data = rio::import(file.path, format = format)
else data = rio::import(file.path)
}else if(!is.null(sep) & sep==" "){
data = data.table::fread(file.path, sep = sep)
}
}
# reading several files from a directory
if(dir.exists(file.path) & length(list.files(file.path))>0){
if(!is.null(pattern)) data = rio::import_list(list.files(file.path, full.names = TRUE, pattern = pattern))
else data = rio::import_list(list.files(file.path, full.names = TRUE))
}
data
}
data = read_epi(file.path = dir.path)
dir.path = "/Users/karimmane/Documents/Karim/LSHTM/Data"
data = read_epi(file.path = dir.path)
View(data)
data = read_epi(file.path = dir.path, pattern = "csv")
data = read_epi(file.path = dir.path, pattern = "*.csv")
data = read_epi(file.path = dir.path, pattern = "txt")
list.files("/Users/karimmane/Documents/Karim/LSHTM/Data/")
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
credentials.file = "/Users/karimmane/Documents/Karim/LSHTM/Data/.credentials_karim.ini"
# reading all fields and records from 'Pats__Covid_19_Cohort_1_Screening' project
data = read_epi(credentials.file, project.id="Pats__Covid_19_Cohort_1_Screening")
fields = names(data$data)[1:10]
fields
fields = c("day_1_q_ran_id","redcap_event_name","day_1_q_1a","day_1_q_1b","day_1_q_1c","day_1_q_1","day_1_q_2","day_1_q_3","day_1_q_4","day_1_q_5")
data = read_epi(credentials.file, project.id="Pats__Covid_19_Cohort_1_Screening", fields = fields)
dim(data$data)
records = data$data$day_1_q_ran_id[1:10,]
records = data$data$day_1_q_ran_id[1:10]
records
records = unique(data$data$day_1_q_ran_id)[1:10]
records
records = c("C10001/3","C10002/1","C10003/7","C10004/5","C10005/9","C10006/8","C10007/6","C10008/4","C10009/2","C10010/1")
data = read_epi(credentials.file, project.id="Pats__Covid_19_Cohort_1_Screening", records =  records)
dim(data$data)
data = read_epi(credentials.file, project.id="Pats__Covid_19_Cohort_1_Screening", records =  records, fields = fields)
dim(data$data)
data = read_epi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
fields=names(data)[1:10]
fields.of.interest = data %>% dplyr::select(fields)
library(dplyr)
fields.of.interest = data %>% dplyr::select(fields)
fields.of.interest = data %>% dplyr::select(all_of(fields))
fields
records = data$id[1:10]
records
data = data %>% filter(data[[id.column.name]] %in% records)
id.position=1
id.column.name = names(data)[id.position]
data = data %>% filter(data[[id.column.name]] %in% records)
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
data = read_epi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events", fields = fields)
source("/Users/karimmane/Documents/Karim/LSHTM/Codes/MRCG_data_import.R")
data = read_epi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events", fields = fields)
data = read_epi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events", records = records)
data = read_epi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events", records = records, fields = fields)
devtools::install_github("Karim-Mane/test")
??test
library(test)
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/readepi")
devtools::build_readme()
devtools::build_readme()
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/")
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/readepi/")
devtools::build_readme()
rmarkdown::render("readme.Rmd")
devtools::build_readme()
devtools::build_readme()
buildPkgDocumentation()
devtools::document()
remove.packages("stringr")
install.packages("stringr")
devtools::document()
devtools::build_readme()
?devtools::build_readme
build_rmd()
devtools::build_rmd()
devtools::build_readme()
devtools::build_readme()
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/readepi")
devtools::build_readme()
devtools::document()
devtools::document()
rm(list = c("read_epi", "read_from_file", "read_from_ms_sql_server", "read_from_redcap"))
devtools::document()
devtools::build_readme()
devtools::document()
devtools::build_readme()
usethis::use_testthat()
use_test()
usethis::use_test("basic-test")
devtools::build_readme()
createPackage(package.name="readepi",
where="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages",
organisation.name="Karim-Mane")
test::createPackage(package.name="readepi",
where="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages",
organisation.name="Karim-Mane")
library(usethis)
use_readme_rmd()
devtools::document()
devtools::build_readme()
devtools::build_readme()
library(readepi)
??readepi
